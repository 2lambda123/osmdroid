
description = 'OpenMap in the Play Store, the example app for using osmdroid'

apply plugin: 'com.android.application'
apply from: "$rootDir/gradle/android-signing.gradle"
android {
    compileSdkVersion findProperty('android.compileSdkVersion').toInteger()

    defaultConfig {
        applicationId 'org.osmdroid'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        minSdkVersion Integer.parseInt(project.property('android-minSdkForSupportLib.version'))
        multiDexEnabled = true
    }
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }
    sourceSets {
        androidTest {
            java.srcDirs = ['../osmdroid-android-it/src/main/java']
        }
    }
    packagingOptions{
        pickFirst "androidsupportmultidexversion.txt"
    }



}

dependencies {
    //apparently google or gradle changed something so that
    //transitive dependencies of submodules in the same project
    //are not longer resolved...

    //osmdroid-mapsforge
    implementation 'org.mapsforge:mapsforge-map-android:0.11.0'
    implementation 'org.mapsforge:mapsforge-map:0.11.0'
    implementation 'org.mapsforge:mapsforge-themes:0.11.0'


    implementation "com.android.support:support-v4:${project.property('android-support.version')}"
    implementation project(':osmdroid-android')
    implementation project(':osmdroid-geopackage')
    implementation project(':osmdroid-mapsforge')
    implementation project(':osmdroid-wms')
    implementation project(':osmdroid-shape')

    implementation 'io.github.missioncommand:mil-sym-android-renderer:0.1.48'

    //used for various demos for picking offline tile archives
    implementation 'com.github.angads25:filepicker:1.1.1'

    //used for bookmark demo
    implementation group: 'com.opencsv', name: 'opencsv', version: '4.4'

    //usual android stuff
    implementation "com.android.support:design:${project.property('android-support.version')}" //needed for UI menuing
    implementation "com.android.support:cardview-v7:${project.property('android-support.version')}"  //needed for samples only
    implementation "com.android.support:recyclerview-v7:${project.property('android-support.version')}" //needed for samples only
    implementation 'com.android.support:multidex:1.0.3'

    implementation "com.android.support:appcompat-v7:${project.property('android-support.version')}" //needed for UI menuing
    //crash logging
    implementation 'ch.acra:acra:4.7.0'

    //memory leak testing
    implementation 'com.squareup.leakcanary:leakcanary-android:2.2'

    //on device testing
    //FIXME androidTestCompile 'com.android.support.test:runner:0.4.+'
    //FIXME androidTestCompile 'com.android.support.test:rules:0.4.+'
    //FIXME androidTestCompile 'com.android.support:multidex:1.0.3'
    //FIXME androidTestCompile "com.android.support:support-annotations:${project.property('android-support.version')}"
}


//the following sets the required permissions for API 23+ devices and AVDs

android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.ACCESS_FINE_LOCATION'
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice2${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE '
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice2${variant.name.capitalize()}"
    }
}
